import{s as ua,f as i,a as r,g as u,K as f,c as k,j as C,i as l,d as e,Z as R,h as q,_ as I,v as G}from"./scheduler.a9223a08.js";import{S as ra,i as ka,b as E,d as M,m as S,a as P,t as T,e as b}from"./index.ee2268cf.js";import{C as L}from"./Code.b5619f7d.js";function ma(m){let s,p,c='<code class="language-undefined">npm i carta-md</code>';return{c(){s=i("pre"),p=new R(!1),this.h()},l(t){s=u(t,"PRE",{class:!0});var o=q(s);p=I(o,!1),o.forEach(e),this.h()},h(){p.a=null,C(s,"class","language-undefined")},m(t,o){l(t,s,o),p.m(c,s)},p:G,d(t){t&&e(s)}}}function fa(m){let s,p,c='<code class="language-undefined">npm i @cartamd/plugin-name</code>';return{c(){s=i("pre"),p=new R(!1),this.h()},l(t){s=u(t,"PRE",{class:!0});var o=q(s);p=I(o,!1),o.forEach(e),this.h()},h(){p.a=null,C(s,"class","language-undefined")},m(t,o){l(t,s,o),p.m(c,s)},p:G,d(t){t&&e(s)}}}function ga(m){let s,p,c=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> CartaEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token string">'carta-md/default.css'</span><span class="token punctuation">;</span> <span class="token comment">/* Default theme */</span>
	<span class="token keyword">import</span> <span class="token string">'carta-md/light.css'</span><span class="token punctuation">;</span> <span class="token comment">/* Markdown input theme */</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token comment">// Remember to use a sanitizer to prevent XSS attacks!</span>
		<span class="token comment">// More on that below</span>
		<span class="token comment">// sanitizer: ...</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CartaEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token comment">/* Set your custom monospace font */</span>
	<span class="token selector">:global(.carta-font-code)</span> <span class="token punctuation">&#123;</span>
		<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`;return{c(){s=i("pre"),p=new R(!1),this.h()},l(t){s=u(t,"PRE",{class:!0});var o=q(s);p=I(o,!1),o.forEach(e),this.h()},h(){p.a=null,C(s,"class","language-svelte")},m(t,o){l(t,s,o),p.m(c,s)},p:G,d(t){t&&e(s)}}}function da(m){let s,p,c=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> CartaViewer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token comment">/* ... */</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CartaViewer</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){s=i("pre"),p=new R(!1),this.h()},l(t){s=u(t,"PRE",{class:!0});var o=q(s);p=I(o,!1),o.forEach(e),this.h()},h(){p.a=null,C(s,"class","language-svelte")},m(t,o){l(t,s,o),p.m(c,s)},p:G,d(t){t&&e(s)}}}function $a(m){let s,p,c=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token comment">// Your other stuff...</span>
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sanitize <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'isomorphic-dompurify'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">sanitizer</span><span class="token operator">:</span> sanitize
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CartaEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span></code>`;return{c(){s=i("pre"),p=new R(!1),this.h()},l(t){s=u(t,"PRE",{class:!0});var o=q(s);p=I(o,!1),o.forEach(e),this.h()},h(){p.a=null,C(s,"class","language-svelte")},m(t,o){l(t,s,o),p.m(c,s)},p:G,d(t){t&&e(s)}}}function ha(m){let s,p='<a href="#installation">Installation</a>',c,t,o="Installing the core package:",O,g,V,y,U="Installing plugins:",X,d,B,$,W='<a href="#setup">Setup</a>',D,x,aa="Setup a basic editor:",F,h,K,H,sa="Or, if you just want to render content:",Y,_,Z,v,na='<a href="#sanitization">Sanitization</a>',A,j,ta='By default Carta does <strong>not</strong> sanitize user input, which can include malicious code that could lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" rel="nofollow">XSS attacks</a>. For this reason it is <em>strongly recommended</em> to install a package that handles that for you.',J,z,ea='Since Carta operates both on the server and the client, youâ€™d need a sanitizer able to work in both environments, for example <a href="https://www.npmjs.com/package/isomorphic-dompurify" rel="nofollow">isomorphic-dompurify</a> or <a href="https://www.npmjs.com/package/sanitize-html" rel="nofollow">sanitize-html</a>. Here is an example using the former, which requires minimum configuration.',N,w,Q;return g=new L({props:{$$slots:{default:[ma]},$$scope:{ctx:m}}}),d=new L({props:{$$slots:{default:[fa]},$$scope:{ctx:m}}}),h=new L({props:{$$slots:{default:[ga]},$$scope:{ctx:m}}}),_=new L({props:{$$slots:{default:[da]},$$scope:{ctx:m}}}),w=new L({props:{$$slots:{default:[$a]},$$scope:{ctx:m}}}),{c(){s=i("h2"),s.innerHTML=p,c=r(),t=i("p"),t.textContent=o,O=r(),E(g.$$.fragment),V=r(),y=i("p"),y.textContent=U,X=r(),E(d.$$.fragment),B=r(),$=i("h2"),$.innerHTML=W,D=r(),x=i("p"),x.textContent=aa,F=r(),E(h.$$.fragment),K=r(),H=i("p"),H.textContent=sa,Y=r(),E(_.$$.fragment),Z=r(),v=i("h2"),v.innerHTML=na,A=r(),j=i("p"),j.innerHTML=ta,J=r(),z=i("p"),z.innerHTML=ea,N=r(),E(w.$$.fragment),this.h()},l(a){s=u(a,"H2",{id:!0,["data-svelte-h"]:!0}),f(s)!=="svelte-18vig38"&&(s.innerHTML=p),c=k(a),t=u(a,"P",{["data-svelte-h"]:!0}),f(t)!=="svelte-1utr4t3"&&(t.textContent=o),O=k(a),M(g.$$.fragment,a),V=k(a),y=u(a,"P",{["data-svelte-h"]:!0}),f(y)!=="svelte-15kmill"&&(y.textContent=U),X=k(a),M(d.$$.fragment,a),B=k(a),$=u(a,"H2",{id:!0,["data-svelte-h"]:!0}),f($)!=="svelte-1uj9ei1"&&($.innerHTML=W),D=k(a),x=u(a,"P",{["data-svelte-h"]:!0}),f(x)!=="svelte-17a7tcx"&&(x.textContent=aa),F=k(a),M(h.$$.fragment,a),K=k(a),H=u(a,"P",{["data-svelte-h"]:!0}),f(H)!=="svelte-19ezkc3"&&(H.textContent=sa),Y=k(a),M(_.$$.fragment,a),Z=k(a),v=u(a,"H2",{id:!0,["data-svelte-h"]:!0}),f(v)!=="svelte-u7hsf9"&&(v.innerHTML=na),A=k(a),j=u(a,"P",{["data-svelte-h"]:!0}),f(j)!=="svelte-1t1ldau"&&(j.innerHTML=ta),J=k(a),z=u(a,"P",{["data-svelte-h"]:!0}),f(z)!=="svelte-qj9me5"&&(z.innerHTML=ea),N=k(a),M(w.$$.fragment,a),this.h()},h(){C(s,"id","installation"),C($,"id","setup"),C(v,"id","sanitization")},m(a,n){l(a,s,n),l(a,c,n),l(a,t,n),l(a,O,n),S(g,a,n),l(a,V,n),l(a,y,n),l(a,X,n),S(d,a,n),l(a,B,n),l(a,$,n),l(a,D,n),l(a,x,n),l(a,F,n),S(h,a,n),l(a,K,n),l(a,H,n),l(a,Y,n),S(_,a,n),l(a,Z,n),l(a,v,n),l(a,A,n),l(a,j,n),l(a,J,n),l(a,z,n),l(a,N,n),S(w,a,n),Q=!0},p(a,[n]){const pa={};n&1&&(pa.$$scope={dirty:n,ctx:a}),g.$set(pa);const oa={};n&1&&(oa.$$scope={dirty:n,ctx:a}),d.$set(oa);const la={};n&1&&(la.$$scope={dirty:n,ctx:a}),h.$set(la);const ca={};n&1&&(ca.$$scope={dirty:n,ctx:a}),_.$set(ca);const ia={};n&1&&(ia.$$scope={dirty:n,ctx:a}),w.$set(ia)},i(a){Q||(P(g.$$.fragment,a),P(d.$$.fragment,a),P(h.$$.fragment,a),P(_.$$.fragment,a),P(w.$$.fragment,a),Q=!0)},o(a){T(g.$$.fragment,a),T(d.$$.fragment,a),T(h.$$.fragment,a),T(_.$$.fragment,a),T(w.$$.fragment,a),Q=!1},d(a){a&&(e(s),e(c),e(t),e(O),e(V),e(y),e(X),e(B),e($),e(D),e(x),e(F),e(K),e(H),e(Y),e(Z),e(v),e(A),e(j),e(J),e(z),e(N)),b(g,a),b(d,a),b(h,a),b(_,a),b(w,a)}}}const Ca={title:"Getting Started",section:"Overview"};class ya extends ra{constructor(s){super(),ka(this,s,null,ha,ua,{})}}export{ya as default,Ca as metadata};
