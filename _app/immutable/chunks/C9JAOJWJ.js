import{s as Wn,d as t,i as p,l as d,c,m,g as u,e as P,p as T,h as i,j as r,H as L,n as N}from"./CXWpkiB0.js";import{S as Yn,i as An,d as G,t as X,a as K,m as W,c as Y,b as A}from"./FoG9SWyi.js";import{C as J}from"./B9QsPoTl.js";function Jn(f){let a,o,k='<code class="language-undefined">npm i carta-md</code>';return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-undefined")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function Nn(f){let a,o,k='<code class="language-undefined">npm i @cartamd/plugin-name</code>';return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-undefined")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function Qn(f){let a,o,k=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> MarkdownEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token string">'carta-md/default.css'</span><span class="token punctuation">;</span> <span class="token comment">/* Default theme */</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token comment">// Remember to use a sanitizer to prevent XSS attacks!</span>
		<span class="token comment">// More on that below</span>
		<span class="token comment">// sanitizer: ...</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkdownEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token comment">/* Set your monospace font (Required to have the editor working correctly!) */</span>
	<span class="token selector">:global(.carta-font-code)</span> <span class="token punctuation">&#123;</span>
		<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>
		<span class="token property">font-size</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`;return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-svelte")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function Un(f){let a,o,k=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> Markdown <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token comment">/* ... */</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Markdown</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-svelte")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function Vn(f){let a,o,k=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token comment">// Your other stuff...</span>
	<span class="token keyword">import</span> DOMPurify <span class="token keyword">from</span> <span class="token string">'isomorphic-dompurify'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">sanitizer</span><span class="token operator">:</span> DOMPurify<span class="token punctuation">.</span>sanitize
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkdownEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span></code>`;return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-svelte")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function Zn(f){let a,o,k=`<code class="language-ts"><span class="token comment">// +page.server.ts</span>

<span class="token comment">// Path to an server-side static Carta instance</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> carta <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$lib/path/to/carta'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> load<span class="token operator">:</span> <span class="token function-variable function">PageServerLoad</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> markdown <span class="token operator">=</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> carta<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>markdown<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
		html
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-ts")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function ns(f){let a,o,k=`<code class="language-svelte"><span class="token comment">&lt;!-- +page.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> PreRendered <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>

	<span class="token keyword">export</span> <span class="token keyword">let</span> data<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PreRendered</span> <span class="token attr-name">html=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>html<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){a=i("pre"),o=new L(!1),this.h()},l(e){a=c(e,"PRE",{class:!0});var l=P(a);o=T(l,!1),l.forEach(t),this.h()},h(){o.a=null,d(a,"class","language-svelte")},m(e,l){p(e,a,l),o.m(k,a)},p:N,d(e){e&&t(a)}}}function ss(f){let a,o='<a href="#installation">Installation</a>',k,e,l="Installing the core package:",Q,g,U,b,yn="Installing plugins:",V,h,Z,v,Cn='<a href="#setup">Setup</a>',nn,j,xn="Setup a basic editor:",sn,$,an,E,Mn="Or, if you just want to render content:",tn,w,en,_,Hn='<a href="#reactivity">Reactivity</a>',pn,S,Pn="The <code>&lt;Markdown&gt;</code> component is not reactive. If you want to make it reactive, you can either create your own component using the <code>render</code> function provided by the <code>Carta</code> class, or use Svelte <code>#key</code> block:",on,z,ln,Kn=`<code class="language-svelte"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key value<span class="token punctuation">&#125;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Markdown</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></code>`,cn,R,Tn="Beware that rendering Markdown can become quite resources-expensive, especially if you are using different plugins.",un,y,Ln='<a href="#sanitization">Sanitization</a>',rn,q,bn='By default Carta does <strong>not</strong> sanitize user input, which can include malicious code that could lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" rel="nofollow">XSS attacks</a>. For this reason it is <em>strongly recommended</em> to install a package that handles that for you.',kn,I,jn='Since Carta operates both on the server and the client, you’d need a sanitizer able to work in both environments, for example <a href="https://www.npmjs.com/package/isomorphic-dompurify" rel="nofollow">isomorphic-dompurify</a> or <a href="https://www.npmjs.com/package/sanitize-html" rel="nofollow">sanitize-html</a>. Here is an example using the former, which requires minimum configuration.',mn,C,fn,x,En='<a href="#pre-rendering">Pre-rendering</a>',dn,O,Sn="While the <code>&lt;Markdown&gt;</code> component is SSR compatible and allows you to pre-render some content on the server, it has some limitations and drawbacks:",gn,D,zn="<li>It cannot render content requiring asynchronous code execution(for example <code>plugin-code</code>);</li> <li>For the previous reason, it also needs to render the same markdown on the client. This requires the client to import this library and then render the new HTML, which can slow down the page, especially if you are using different plugins.</li>",hn,F,Rn="This can be avoided by pre-rendering the whole content on the server, which can also be improved further by storing/caching the rendered HTML(this implementation is up to you).",vn,B,qn="For example, in SvelteKit:",$n,M,wn,H,_n;return g=new J({props:{$$slots:{default:[Jn]},$$scope:{ctx:f}}}),h=new J({props:{$$slots:{default:[Nn]},$$scope:{ctx:f}}}),$=new J({props:{$$slots:{default:[Qn]},$$scope:{ctx:f}}}),w=new J({props:{$$slots:{default:[Un]},$$scope:{ctx:f}}}),C=new J({props:{$$slots:{default:[Vn]},$$scope:{ctx:f}}}),M=new J({props:{$$slots:{default:[Zn]},$$scope:{ctx:f}}}),H=new J({props:{$$slots:{default:[ns]},$$scope:{ctx:f}}}),{c(){a=i("h2"),a.innerHTML=o,k=r(),e=i("p"),e.textContent=l,Q=r(),A(g.$$.fragment),U=r(),b=i("p"),b.textContent=yn,V=r(),A(h.$$.fragment),Z=r(),v=i("h2"),v.innerHTML=Cn,nn=r(),j=i("p"),j.textContent=xn,sn=r(),A($.$$.fragment),an=r(),E=i("p"),E.textContent=Mn,tn=r(),A(w.$$.fragment),en=r(),_=i("h3"),_.innerHTML=Hn,pn=r(),S=i("p"),S.innerHTML=Pn,on=r(),z=i("pre"),ln=new L(!1),cn=r(),R=i("p"),R.textContent=Tn,un=r(),y=i("h2"),y.innerHTML=Ln,rn=r(),q=i("p"),q.innerHTML=bn,kn=r(),I=i("p"),I.innerHTML=jn,mn=r(),A(C.$$.fragment),fn=r(),x=i("h2"),x.innerHTML=En,dn=r(),O=i("p"),O.innerHTML=Sn,gn=r(),D=i("ol"),D.innerHTML=zn,hn=r(),F=i("p"),F.textContent=Rn,vn=r(),B=i("p"),B.textContent=qn,$n=r(),A(M.$$.fragment),wn=r(),A(H.$$.fragment),this.h()},l(n){a=c(n,"H2",{id:!0,"data-svelte-h":!0}),m(a)!=="svelte-18vig38"&&(a.innerHTML=o),k=u(n),e=c(n,"P",{"data-svelte-h":!0}),m(e)!=="svelte-1utr4t3"&&(e.textContent=l),Q=u(n),Y(g.$$.fragment,n),U=u(n),b=c(n,"P",{"data-svelte-h":!0}),m(b)!=="svelte-15kmill"&&(b.textContent=yn),V=u(n),Y(h.$$.fragment,n),Z=u(n),v=c(n,"H2",{id:!0,"data-svelte-h":!0}),m(v)!=="svelte-1uj9ei1"&&(v.innerHTML=Cn),nn=u(n),j=c(n,"P",{"data-svelte-h":!0}),m(j)!=="svelte-17a7tcx"&&(j.textContent=xn),sn=u(n),Y($.$$.fragment,n),an=u(n),E=c(n,"P",{"data-svelte-h":!0}),m(E)!=="svelte-19ezkc3"&&(E.textContent=Mn),tn=u(n),Y(w.$$.fragment,n),en=u(n),_=c(n,"H3",{id:!0,"data-svelte-h":!0}),m(_)!=="svelte-3lqvue"&&(_.innerHTML=Hn),pn=u(n),S=c(n,"P",{"data-svelte-h":!0}),m(S)!=="svelte-uqewoa"&&(S.innerHTML=Pn),on=u(n),z=c(n,"PRE",{class:!0});var s=P(z);ln=T(s,!1),s.forEach(t),cn=u(n),R=c(n,"P",{"data-svelte-h":!0}),m(R)!=="svelte-l8zcw4"&&(R.textContent=Tn),un=u(n),y=c(n,"H2",{id:!0,"data-svelte-h":!0}),m(y)!=="svelte-u7hsf9"&&(y.innerHTML=Ln),rn=u(n),q=c(n,"P",{"data-svelte-h":!0}),m(q)!=="svelte-1t1ldau"&&(q.innerHTML=bn),kn=u(n),I=c(n,"P",{"data-svelte-h":!0}),m(I)!=="svelte-qj9me5"&&(I.innerHTML=jn),mn=u(n),Y(C.$$.fragment,n),fn=u(n),x=c(n,"H2",{id:!0,"data-svelte-h":!0}),m(x)!=="svelte-e0u7s8"&&(x.innerHTML=En),dn=u(n),O=c(n,"P",{"data-svelte-h":!0}),m(O)!=="svelte-1e0x7cs"&&(O.innerHTML=Sn),gn=u(n),D=c(n,"OL",{"data-svelte-h":!0}),m(D)!=="svelte-imttyo"&&(D.innerHTML=zn),hn=u(n),F=c(n,"P",{"data-svelte-h":!0}),m(F)!=="svelte-1u8en29"&&(F.textContent=Rn),vn=u(n),B=c(n,"P",{"data-svelte-h":!0}),m(B)!=="svelte-71rpmp"&&(B.textContent=qn),$n=u(n),Y(M.$$.fragment,n),wn=u(n),Y(H.$$.fragment,n),this.h()},h(){d(a,"id","installation"),d(v,"id","setup"),d(_,"id","reactivity"),ln.a=null,d(z,"class","language-svelte"),d(y,"id","sanitization"),d(x,"id","pre-rendering")},m(n,s){p(n,a,s),p(n,k,s),p(n,e,s),p(n,Q,s),W(g,n,s),p(n,U,s),p(n,b,s),p(n,V,s),W(h,n,s),p(n,Z,s),p(n,v,s),p(n,nn,s),p(n,j,s),p(n,sn,s),W($,n,s),p(n,an,s),p(n,E,s),p(n,tn,s),W(w,n,s),p(n,en,s),p(n,_,s),p(n,pn,s),p(n,S,s),p(n,on,s),p(n,z,s),ln.m(Kn,z),p(n,cn,s),p(n,R,s),p(n,un,s),p(n,y,s),p(n,rn,s),p(n,q,s),p(n,kn,s),p(n,I,s),p(n,mn,s),W(C,n,s),p(n,fn,s),p(n,x,s),p(n,dn,s),p(n,O,s),p(n,gn,s),p(n,D,s),p(n,hn,s),p(n,F,s),p(n,vn,s),p(n,B,s),p(n,$n,s),W(M,n,s),p(n,wn,s),W(H,n,s),_n=!0},p(n,[s]){const In={};s&1&&(In.$$scope={dirty:s,ctx:n}),g.$set(In);const On={};s&1&&(On.$$scope={dirty:s,ctx:n}),h.$set(On);const Dn={};s&1&&(Dn.$$scope={dirty:s,ctx:n}),$.$set(Dn);const Fn={};s&1&&(Fn.$$scope={dirty:s,ctx:n}),w.$set(Fn);const Bn={};s&1&&(Bn.$$scope={dirty:s,ctx:n}),C.$set(Bn);const Gn={};s&1&&(Gn.$$scope={dirty:s,ctx:n}),M.$set(Gn);const Xn={};s&1&&(Xn.$$scope={dirty:s,ctx:n}),H.$set(Xn)},i(n){_n||(K(g.$$.fragment,n),K(h.$$.fragment,n),K($.$$.fragment,n),K(w.$$.fragment,n),K(C.$$.fragment,n),K(M.$$.fragment,n),K(H.$$.fragment,n),_n=!0)},o(n){X(g.$$.fragment,n),X(h.$$.fragment,n),X($.$$.fragment,n),X(w.$$.fragment,n),X(C.$$.fragment,n),X(M.$$.fragment,n),X(H.$$.fragment,n),_n=!1},d(n){n&&(t(a),t(k),t(e),t(Q),t(U),t(b),t(V),t(Z),t(v),t(nn),t(j),t(sn),t(an),t(E),t(tn),t(en),t(_),t(pn),t(S),t(on),t(z),t(cn),t(R),t(un),t(y),t(rn),t(q),t(kn),t(I),t(mn),t(fn),t(x),t(dn),t(O),t(gn),t(D),t(hn),t(F),t(vn),t(B),t($n),t(wn)),G(g,n),G(h,n),G($,n),G(w,n),G(C,n),G(M,n),G(H,n)}}}const as={title:"Getting Started",section:"Overview"},{title:os,section:ls}=as;class cs extends Yn{constructor(a){super(),An(this,a,null,ss,Wn,{})}}export{cs as default,as as metadata};
