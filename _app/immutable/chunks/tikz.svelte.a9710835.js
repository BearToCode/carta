import{s as Q,f as i,a as f,Z as E,g as c,K as $,c as g,h as P,_ as j,d as e,j as w,i as p,v as B}from"./scheduler.78c20ad2.js";import{S as U,i as V,b as F,d as J,m as K,a as N,t as W,e as Y}from"./index.e4e0a9e0.js";import{C as A}from"./Code.9bf6eb00.js";function X(T){let n,l,r='<code class="language-undefined">npm i @cartamd/plugin-tikz</code>';return{c(){n=i("pre"),l=new E(!1),this.h()},l(t){n=c(t,"PRE",{class:!0});var o=P(n);l=j(o,!1),o.forEach(e),this.h()},h(){l.a=null,w(n,"class","language-undefined")},m(t,o){p(t,n,o),l.m(r,n)},p:B,d(t){t&&e(n)}}}function ss(T){let n,l,r=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> CartaEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> tikz <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-tikz'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token string">'@cartamd/plugin-tikz/fonts.css'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">tikz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CartaEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){n=i("pre"),l=new E(!1),this.h()},l(t){n=c(t,"PRE",{class:!0});var o=P(n);l=j(o,!1),o.forEach(e),this.h()},h(){l.a=null,w(n,"class","language-svelte")},m(t,o){p(t,n,o),l.m(r,n)},p:B,d(t){t&&e(n)}}}function ns(T){let n,l='This plugin adds support for <strong>PGF/TikZ</strong> illustrations thanks to <a href="https://tikzjax.com/" rel="nofollow">TikZJax</a>. It uses the code generated for the <a href="https://github.com/artisticat1/obsidian-tikzjax" rel="nofollow">Obsidian-TikZ plugin</a>.',r,t,o,u,q='<a href="#important-notes">Important Notes</a>',y,h,Z="<li>This plugin requires the import of a <strong>heavy</strong> library (~7Mb), which is dynamically imported at runtime;</li> <li>Generated images are <strong>not ssr compatible</strong>, as they are rendered in the browser;</li> <li>You need to update your sanitizer to allow the specific tag: <code>&lt;div type=&quot;text/tikz&quot;&gt;</code>.</li>",x,k,O='<a href="#setup">Setup</a>',H,m,b,d,R='<a href="#options">Options</a>',z,_,S="Here are the options you can pass to <code>tikz()</code>:",C,v,L,D=`<code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">TikzExtensionOptions</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
	 * Enables Tikzjax console output.
	 */</span>
	debug<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Class for generated svg div container.
	 */</span>
	<span class="token keyword">class</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Whether to center the generated expression.
	 * @default true
	 */</span>
	center<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Post processing function for html.
	 * This also runs on stored html.
	 */</span>
	postProcessing<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,M;return t=new A({props:{$$slots:{default:[X]},$$scope:{ctx:T}}}),m=new A({props:{$$slots:{default:[ss]},$$scope:{ctx:T}}}),{c(){n=i("p"),n.innerHTML=l,r=f(),F(t.$$.fragment),o=f(),u=i("h2"),u.innerHTML=q,y=f(),h=i("ol"),h.innerHTML=Z,x=f(),k=i("h2"),k.innerHTML=O,H=f(),F(m.$$.fragment),b=f(),d=i("h2"),d.innerHTML=R,z=f(),_=i("p"),_.innerHTML=S,C=f(),v=i("pre"),L=new E(!1),this.h()},l(s){n=c(s,"P",{"data-svelte-h":!0}),$(n)!=="svelte-11uvihg"&&(n.innerHTML=l),r=g(s),J(t.$$.fragment,s),o=g(s),u=c(s,"H2",{id:!0,"data-svelte-h":!0}),$(u)!=="svelte-svduj1"&&(u.innerHTML=q),y=g(s),h=c(s,"OL",{"data-svelte-h":!0}),$(h)!=="svelte-948s5x"&&(h.innerHTML=Z),x=g(s),k=c(s,"H2",{id:!0,"data-svelte-h":!0}),$(k)!=="svelte-1uj9ei1"&&(k.innerHTML=O),H=g(s),J(m.$$.fragment,s),b=g(s),d=c(s,"H2",{id:!0,"data-svelte-h":!0}),$(d)!=="svelte-qvxcr2"&&(d.innerHTML=R),z=g(s),_=c(s,"P",{"data-svelte-h":!0}),$(_)!=="svelte-1p7trzu"&&(_.innerHTML=S),C=g(s),v=c(s,"PRE",{class:!0});var a=P(v);L=j(a,!1),a.forEach(e),this.h()},h(){w(u,"id","important-notes"),w(k,"id","setup"),w(d,"id","options"),L.a=null,w(v,"class","language-ts")},m(s,a){p(s,n,a),p(s,r,a),K(t,s,a),p(s,o,a),p(s,u,a),p(s,y,a),p(s,h,a),p(s,x,a),p(s,k,a),p(s,H,a),K(m,s,a),p(s,b,a),p(s,d,a),p(s,z,a),p(s,_,a),p(s,C,a),p(s,v,a),L.m(D,v),M=!0},p(s,[a]){const G={};a&1&&(G.$$scope={dirty:a,ctx:s}),t.$set(G);const I={};a&1&&(I.$$scope={dirty:a,ctx:s}),m.$set(I)},i(s){M||(N(t.$$.fragment,s),N(m.$$.fragment,s),M=!0)},o(s){W(t.$$.fragment,s),W(m.$$.fragment,s),M=!1},d(s){s&&(e(n),e(r),e(o),e(u),e(y),e(h),e(x),e(k),e(H),e(b),e(d),e(z),e(_),e(C),e(v)),Y(t,s),Y(m,s)}}}const ps={section:"Plugins",title:"TikZ"};class os extends U{constructor(n){super(),V(this,n,null,ns,Q,{})}}export{os as default,ps as metadata};
