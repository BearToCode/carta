import{s as us,e as i,a as r,c as u,l as f,g as k,p as y,i as l,f as e,H as R,b as O,m as q,n as D}from"./scheduler.WCevfC9S.js";import{S as rs,i as ks,c as E,a as P,m as j,t as S,b,d as T}from"./index.BWhD-onO.js";import{C as L}from"./Code.BS7VoApD.js";function ms(m){let a,p,c='<code class="language-undefined">npm i carta-md</code>';return{c(){a=i("pre"),p=new R(!1),this.h()},l(t){a=u(t,"PRE",{class:!0});var o=O(a);p=q(o,!1),o.forEach(e),this.h()},h(){p.a=null,y(a,"class","language-undefined")},m(t,o){l(t,a,o),p.m(c,a)},p:D,d(t){t&&e(a)}}}function fs(m){let a,p,c='<code class="language-undefined">npm i @cartamd/plugin-name</code>';return{c(){a=i("pre"),p=new R(!1),this.h()},l(t){a=u(t,"PRE",{class:!0});var o=O(a);p=q(o,!1),o.forEach(e),this.h()},h(){p.a=null,y(a,"class","language-undefined")},m(t,o){l(t,a,o),p.m(c,a)},p:D,d(t){t&&e(a)}}}function ds(m){let a,p,c=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> MarkdownEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token string">'carta-md/default.css'</span><span class="token punctuation">;</span> <span class="token comment">/* Default theme */</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token comment">// Remember to use a sanitizer to prevent XSS attacks!</span>
		<span class="token comment">// More on that below</span>
		<span class="token comment">// sanitizer: ...</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkdownEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token comment">/* Set your custom monospace font */</span>
	<span class="token selector">:global(.carta-font-code)</span> <span class="token punctuation">&#123;</span>
		<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>
		<span class="token property">font-size</span><span class="token punctuation">:</span> 1.1rem<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`;return{c(){a=i("pre"),p=new R(!1),this.h()},l(t){a=u(t,"PRE",{class:!0});var o=O(a);p=q(o,!1),o.forEach(e),this.h()},h(){p.a=null,y(a,"class","language-svelte")},m(t,o){l(t,a,o),p.m(c,a)},p:D,d(t){t&&e(a)}}}function gs(m){let a,p,c=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> Markdown <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token comment">/* ... */</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'...'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Markdown</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){a=i("pre"),p=new R(!1),this.h()},l(t){a=u(t,"PRE",{class:!0});var o=O(a);p=q(o,!1),o.forEach(e),this.h()},h(){p.a=null,y(a,"class","language-svelte")},m(t,o){l(t,a,o),p.m(c,a)},p:D,d(t){t&&e(a)}}}function $s(m){let a,p,c=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token comment">// Your other stuff...</span>
	<span class="token keyword">import</span> DOMPurify <span class="token keyword">from</span> <span class="token string">'isomorphic-dompurify'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">sanitizer</span><span class="token operator">:</span> DOMPurify<span class="token punctuation">.</span>sanitize
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkdownEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span></code>`;return{c(){a=i("pre"),p=new R(!1),this.h()},l(t){a=u(t,"PRE",{class:!0});var o=O(a);p=q(o,!1),o.forEach(e),this.h()},h(){p.a=null,y(a,"class","language-svelte")},m(t,o){l(t,a,o),p.m(c,a)},p:D,d(t){t&&e(a)}}}function hs(m){let a,p='<a href="#installation">Installation</a>',c,t,o="Installing the core package:",I,d,G,C,W="Installing plugins:",X,g,B,$,Z='<a href="#setup">Setup</a>',F,x,ss="Setup a basic editor:",Y,h,A,M,as="Or, if you just want to render content:",J,_,K,v,ns='<a href="#sanitization">Sanitization</a>',N,H,ts='By default Carta does <strong>not</strong> sanitize user input, which can include malicious code that could lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" rel="nofollow">XSS attacks</a>. For this reason it is <em>strongly recommended</em> to install a package that handles that for you.',Q,z,es='Since Carta operates both on the server and the client, youâ€™d need a sanitizer able to work in both environments, for example <a href="https://www.npmjs.com/package/isomorphic-dompurify" rel="nofollow">isomorphic-dompurify</a> or <a href="https://www.npmjs.com/package/sanitize-html" rel="nofollow">sanitize-html</a>. Here is an example using the former, which requires minimum configuration.',U,w,V;return d=new L({props:{$$slots:{default:[ms]},$$scope:{ctx:m}}}),g=new L({props:{$$slots:{default:[fs]},$$scope:{ctx:m}}}),h=new L({props:{$$slots:{default:[ds]},$$scope:{ctx:m}}}),_=new L({props:{$$slots:{default:[gs]},$$scope:{ctx:m}}}),w=new L({props:{$$slots:{default:[$s]},$$scope:{ctx:m}}}),{c(){a=i("h2"),a.innerHTML=p,c=r(),t=i("p"),t.textContent=o,I=r(),E(d.$$.fragment),G=r(),C=i("p"),C.textContent=W,X=r(),E(g.$$.fragment),B=r(),$=i("h2"),$.innerHTML=Z,F=r(),x=i("p"),x.textContent=ss,Y=r(),E(h.$$.fragment),A=r(),M=i("p"),M.textContent=as,J=r(),E(_.$$.fragment),K=r(),v=i("h2"),v.innerHTML=ns,N=r(),H=i("p"),H.innerHTML=ts,Q=r(),z=i("p"),z.innerHTML=es,U=r(),E(w.$$.fragment),this.h()},l(s){a=u(s,"H2",{id:!0,"data-svelte-h":!0}),f(a)!=="svelte-18vig38"&&(a.innerHTML=p),c=k(s),t=u(s,"P",{"data-svelte-h":!0}),f(t)!=="svelte-1utr4t3"&&(t.textContent=o),I=k(s),P(d.$$.fragment,s),G=k(s),C=u(s,"P",{"data-svelte-h":!0}),f(C)!=="svelte-15kmill"&&(C.textContent=W),X=k(s),P(g.$$.fragment,s),B=k(s),$=u(s,"H2",{id:!0,"data-svelte-h":!0}),f($)!=="svelte-1uj9ei1"&&($.innerHTML=Z),F=k(s),x=u(s,"P",{"data-svelte-h":!0}),f(x)!=="svelte-17a7tcx"&&(x.textContent=ss),Y=k(s),P(h.$$.fragment,s),A=k(s),M=u(s,"P",{"data-svelte-h":!0}),f(M)!=="svelte-19ezkc3"&&(M.textContent=as),J=k(s),P(_.$$.fragment,s),K=k(s),v=u(s,"H2",{id:!0,"data-svelte-h":!0}),f(v)!=="svelte-u7hsf9"&&(v.innerHTML=ns),N=k(s),H=u(s,"P",{"data-svelte-h":!0}),f(H)!=="svelte-1t1ldau"&&(H.innerHTML=ts),Q=k(s),z=u(s,"P",{"data-svelte-h":!0}),f(z)!=="svelte-qj9me5"&&(z.innerHTML=es),U=k(s),P(w.$$.fragment,s),this.h()},h(){y(a,"id","installation"),y($,"id","setup"),y(v,"id","sanitization")},m(s,n){l(s,a,n),l(s,c,n),l(s,t,n),l(s,I,n),j(d,s,n),l(s,G,n),l(s,C,n),l(s,X,n),j(g,s,n),l(s,B,n),l(s,$,n),l(s,F,n),l(s,x,n),l(s,Y,n),j(h,s,n),l(s,A,n),l(s,M,n),l(s,J,n),j(_,s,n),l(s,K,n),l(s,v,n),l(s,N,n),l(s,H,n),l(s,Q,n),l(s,z,n),l(s,U,n),j(w,s,n),V=!0},p(s,[n]){const ps={};n&1&&(ps.$$scope={dirty:n,ctx:s}),d.$set(ps);const os={};n&1&&(os.$$scope={dirty:n,ctx:s}),g.$set(os);const ls={};n&1&&(ls.$$scope={dirty:n,ctx:s}),h.$set(ls);const cs={};n&1&&(cs.$$scope={dirty:n,ctx:s}),_.$set(cs);const is={};n&1&&(is.$$scope={dirty:n,ctx:s}),w.$set(is)},i(s){V||(S(d.$$.fragment,s),S(g.$$.fragment,s),S(h.$$.fragment,s),S(_.$$.fragment,s),S(w.$$.fragment,s),V=!0)},o(s){b(d.$$.fragment,s),b(g.$$.fragment,s),b(h.$$.fragment,s),b(_.$$.fragment,s),b(w.$$.fragment,s),V=!1},d(s){s&&(e(a),e(c),e(t),e(I),e(G),e(C),e(X),e(B),e($),e(F),e(x),e(Y),e(A),e(M),e(J),e(K),e(v),e(N),e(H),e(Q),e(z),e(U)),T(d,s),T(g,s),T(h,s),T(_,s),T(w,s)}}}const ys={title:"Getting Started",section:"Overview"};class Cs extends rs{constructor(a){super(),ks(this,a,null,hs,us,{})}}export{Cs as default,ys as metadata};
