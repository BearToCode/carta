import{s as Cn,d as e,i as p,l as f,c,m as d,g as i,h as u,j as r,n as Y,e as D,p as F,H as N}from"./CXWpkiB0.js";import{S as Hn,i as Mn,d as b,t as R,a as z,m as I,c as S,b as U}from"./FoG9SWyi.js";import{C as q}from"./B9QsPoTl.js";function Tn(m){let s,o,k='<code class="language-undefined">npm i @cartamd/plugin-component</code>';return{c(){s=u("pre"),o=new N(!1),this.h()},l(t){s=c(t,"PRE",{class:!0});var l=D(s);o=F(l,!1),l.forEach(e),this.h()},h(){o.a=null,f(s,"class","language-undefined")},m(t,l){p(t,s,l),o.m(k,s)},p:Y,d(t){t&&e(s)}}}function xn(m){let s,o,k=`<code class="language-svelte"><span class="token comment">&lt;!-- Image.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">export</span> <span class="token keyword">let</span> src<span class="token punctuation">;</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> alt<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Your custom component... --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>src<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>alt<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){s=u("pre"),o=new N(!1),this.h()},l(t){s=c(t,"PRE",{class:!0});var l=D(s);o=F(l,!1),l.forEach(e),this.h()},h(){o.a=null,f(s,"class","language-svelte")},m(t,l){p(t,s,l),o.m(k,s)},p:Y,d(t){t&&e(s)}}}function Ln(m){let s,o,k=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> svelte<span class="token punctuation">,</span> initializeComponents <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-component/svelte'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Image <span class="token keyword">from</span> <span class="token string">'./Image.svelte'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mapped <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">svelte</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span> Image<span class="token punctuation">)</span> <span class="token comment">/* other components ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">component</span><span class="token punctuation">(</span>mapped<span class="token punctuation">,</span> initializeComponents<span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`;return{c(){s=u("pre"),o=new N(!1),this.h()},l(t){s=c(t,"PRE",{class:!0});var l=D(s);o=F(l,!1),l.forEach(e),this.h()},h(){o.a=null,f(s,"class","language-ts")},m(t,l){p(t,s,l),o.m(k,s)},p:Y,d(t){t&&e(s)}}}function Pn(m){let s,o,k=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> svelteCustom <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-component/svelte'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'...'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mapped <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token function">svelteCustom</span><span class="token punctuation">(</span>
		<span class="token string">'my-component-id'</span><span class="token punctuation">,</span>
		<span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// Do something with the node to determine whether to replace it</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		MyComponent
	<span class="token punctuation">)</span> <span class="token comment">/* other components ... */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`;return{c(){s=u("pre"),o=new N(!1),this.h()},l(t){s=c(t,"PRE",{class:!0});var l=D(s);o=F(l,!1),l.forEach(e),this.h()},h(){o.a=null,f(s,"class","language-ts")},m(t,l){p(t,s,l),o.m(k,s)},p:Y,d(t){t&&e(s)}}}function En(m){let s,o,k=`<code class="language-svelte"><span class="token comment">&lt;!-- Heading.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Slot <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-component/svelte'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slot</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code>`;return{c(){s=u("pre"),o=new N(!1),this.h()},l(t){s=c(t,"PRE",{class:!0});var l=D(s);o=F(l,!1),l.forEach(e),this.h()},h(){o.a=null,f(s,"class","language-svelte")},m(t,l){p(t,s,l),o.m(k,s)},p:Y,d(t){t&&e(s)}}}function jn(m){let s,o,k=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> initializeComponents <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-component/svelte'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte'</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>

	<span class="token keyword">export</span> <span class="token keyword">let</span> data<span class="token punctuation">;</span>

	<span class="token keyword">let</span> container<span class="token punctuation">;</span>

	<span class="token comment">// Needs access to the mapped components</span>
	<span class="token keyword">const</span> mapped <span class="token operator">=</span> <span class="token punctuation">[</span>
		<span class="token comment">/* ... */</span>
	<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">initializeComponents</span><span class="token punctuation">(</span>mapped<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PreRendered</span> <span class="token attr-name">html=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>html<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`;return{c(){s=u("pre"),o=new N(!1),this.h()},l(t){s=c(t,"PRE",{class:!0});var l=D(s);o=F(l,!1),l.forEach(e),this.h()},h(){o.a=null,f(s,"class","language-svelte")},m(t,l){p(t,s,l),o.m(k,s)},p:Y,d(t){t&&e(s)}}}function bn(m){let s,o="This plugin adds support for mapping certain elements to <strong>components</strong> inside the editor.",k,t,l='<a href="#installation">Installation</a>',W,g,A,$,on='<a href="#usage">Usage</a>',B,h,ln='<a href="#mapping-components">Mapping components</a>',G,x,cn=`The first thing to do is to map certain elements(nodes) to their corresponding components.
For example, if you want to use a custom renderer for images:`,J,v,K,_,O,L,un="You can use custom logic when selecting which nodes to map:",Q,w,V,y,rn='<a href="#using-ltslot-gt">Using <code>&lt;slot /&gt;</code></a>',X,P,kn="To render children, you need to use a custom <code>&lt;Slot /&gt;</code> component:",Z,C,nn,H,mn='<a href="#usage-with-pre-rendering">Usage with pre-rendering</a>',sn,E,dn="When pre-rendering content on the server (using the <code>&lt;PreRendered&gt;</code> component), the components will not be mounted by default. You need to use the <code>initializeComponents</code> function yourself.",an,M,tn,T,fn='<a href="#limitations">Limitations</a>',en,j,gn="<li>During server-side rendering, embedded styles for the mapped components are not added to the bundle. Use a dedicated stylesheet instead.</li> <li><code>&lt;svelte:head&gt;</code> is not available during server-side rendering.</li>",pn;return g=new q({props:{$$slots:{default:[Tn]},$$scope:{ctx:m}}}),v=new q({props:{$$slots:{default:[xn]},$$scope:{ctx:m}}}),_=new q({props:{$$slots:{default:[Ln]},$$scope:{ctx:m}}}),w=new q({props:{$$slots:{default:[Pn]},$$scope:{ctx:m}}}),C=new q({props:{$$slots:{default:[En]},$$scope:{ctx:m}}}),M=new q({props:{$$slots:{default:[jn]},$$scope:{ctx:m}}}),{c(){s=u("p"),s.innerHTML=o,k=r(),t=u("h2"),t.innerHTML=l,W=r(),U(g.$$.fragment),A=r(),$=u("h2"),$.innerHTML=on,B=r(),h=u("h3"),h.innerHTML=ln,G=r(),x=u("p"),x.textContent=cn,J=r(),U(v.$$.fragment),K=r(),U(_.$$.fragment),O=r(),L=u("p"),L.textContent=un,Q=r(),U(w.$$.fragment),V=r(),y=u("h3"),y.innerHTML=rn,X=r(),P=u("p"),P.innerHTML=kn,Z=r(),U(C.$$.fragment),nn=r(),H=u("h3"),H.innerHTML=mn,sn=r(),E=u("p"),E.innerHTML=dn,an=r(),U(M.$$.fragment),tn=r(),T=u("h3"),T.innerHTML=fn,en=r(),j=u("ul"),j.innerHTML=gn,this.h()},l(n){s=c(n,"P",{"data-svelte-h":!0}),d(s)!=="svelte-tuduf0"&&(s.innerHTML=o),k=i(n),t=c(n,"H2",{id:!0,"data-svelte-h":!0}),d(t)!=="svelte-18vig38"&&(t.innerHTML=l),W=i(n),S(g.$$.fragment,n),A=i(n),$=c(n,"H2",{id:!0,"data-svelte-h":!0}),d($)!=="svelte-iylfsz"&&($.innerHTML=on),B=i(n),h=c(n,"H3",{id:!0,"data-svelte-h":!0}),d(h)!=="svelte-akj720"&&(h.innerHTML=ln),G=i(n),x=c(n,"P",{"data-svelte-h":!0}),d(x)!=="svelte-gvfqbm"&&(x.textContent=cn),J=i(n),S(v.$$.fragment,n),K=i(n),S(_.$$.fragment,n),O=i(n),L=c(n,"P",{"data-svelte-h":!0}),d(L)!=="svelte-1rxqk6i"&&(L.textContent=un),Q=i(n),S(w.$$.fragment,n),V=i(n),y=c(n,"H3",{id:!0,"data-svelte-h":!0}),d(y)!=="svelte-1ca1qsx"&&(y.innerHTML=rn),X=i(n),P=c(n,"P",{"data-svelte-h":!0}),d(P)!=="svelte-mnlvhd"&&(P.innerHTML=kn),Z=i(n),S(C.$$.fragment,n),nn=i(n),H=c(n,"H3",{id:!0,"data-svelte-h":!0}),d(H)!=="svelte-fx7eoz"&&(H.innerHTML=mn),sn=i(n),E=c(n,"P",{"data-svelte-h":!0}),d(E)!=="svelte-ujuen4"&&(E.innerHTML=dn),an=i(n),S(M.$$.fragment,n),tn=i(n),T=c(n,"H3",{id:!0,"data-svelte-h":!0}),d(T)!=="svelte-lt9ef1"&&(T.innerHTML=fn),en=i(n),j=c(n,"UL",{"data-svelte-h":!0}),d(j)!=="svelte-1p1ft8m"&&(j.innerHTML=gn),this.h()},h(){f(t,"id","installation"),f($,"id","usage"),f(h,"id","mapping-components"),f(y,"id","using-ltslot-gt"),f(H,"id","usage-with-pre-rendering"),f(T,"id","limitations")},m(n,a){p(n,s,a),p(n,k,a),p(n,t,a),p(n,W,a),I(g,n,a),p(n,A,a),p(n,$,a),p(n,B,a),p(n,h,a),p(n,G,a),p(n,x,a),p(n,J,a),I(v,n,a),p(n,K,a),I(_,n,a),p(n,O,a),p(n,L,a),p(n,Q,a),I(w,n,a),p(n,V,a),p(n,y,a),p(n,X,a),p(n,P,a),p(n,Z,a),I(C,n,a),p(n,nn,a),p(n,H,a),p(n,sn,a),p(n,E,a),p(n,an,a),I(M,n,a),p(n,tn,a),p(n,T,a),p(n,en,a),p(n,j,a),pn=!0},p(n,[a]){const $n={};a&1&&($n.$$scope={dirty:a,ctx:n}),g.$set($n);const hn={};a&1&&(hn.$$scope={dirty:a,ctx:n}),v.$set(hn);const vn={};a&1&&(vn.$$scope={dirty:a,ctx:n}),_.$set(vn);const _n={};a&1&&(_n.$$scope={dirty:a,ctx:n}),w.$set(_n);const wn={};a&1&&(wn.$$scope={dirty:a,ctx:n}),C.$set(wn);const yn={};a&1&&(yn.$$scope={dirty:a,ctx:n}),M.$set(yn)},i(n){pn||(z(g.$$.fragment,n),z(v.$$.fragment,n),z(_.$$.fragment,n),z(w.$$.fragment,n),z(C.$$.fragment,n),z(M.$$.fragment,n),pn=!0)},o(n){R(g.$$.fragment,n),R(v.$$.fragment,n),R(_.$$.fragment,n),R(w.$$.fragment,n),R(C.$$.fragment,n),R(M.$$.fragment,n),pn=!1},d(n){n&&(e(s),e(k),e(t),e(W),e(A),e($),e(B),e(h),e(G),e(x),e(J),e(K),e(O),e(L),e(Q),e(V),e(y),e(X),e(P),e(Z),e(nn),e(H),e(sn),e(E),e(an),e(tn),e(T),e(en),e(j)),b(g,n),b(v,n),b(_,n),b(w,n),b(C,n),b(M,n)}}}const Rn={section:"Plugins",title:"Component"},{section:Un,title:qn}=Rn;class Yn extends Hn{constructor(s){super(),Mn(this,s,null,bn,Cn,{})}}export{Yn as default,Rn as metadata};
