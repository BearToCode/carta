import{s as Q,e as i,a as f,H as E,c,l as $,g,b as P,m as j,f as e,p as w,i as p,n as D}from"./scheduler.MTTyNl1s.js";import{S as U,i as V,c as G,a as J,m as N,t as W,b as Y,d as A}from"./index.DrAlApqI.js";import{C as B}from"./Code.BLkHPVHm.js";import{b as X}from"./entry.DN7Cnbao.js";function ss(T){let n,l,r='<code class="language-undefined">npm i @cartamd/plugin-tikz</code>';return{c(){n=i("pre"),l=new E(!1),this.h()},l(t){n=c(t,"PRE",{class:!0});var o=P(n);l=j(o,!1),o.forEach(e),this.h()},h(){l.a=null,w(n,"class","language-undefined")},m(t,o){p(t,n,o),l.m(r,n)},p:D,d(t){t&&e(n)}}}function ns(T){let n,l,r=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Carta<span class="token punctuation">,</span> MarkdownEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'carta-md'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> tikz <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@cartamd/plugin-tikz'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> <span class="token string">'@cartamd/plugin-tikz/fonts.css'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> carta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carta</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">tikz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MarkdownEditor</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>carta<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></code>`;return{c(){n=i("pre"),l=new E(!1),this.h()},l(t){n=c(t,"PRE",{class:!0});var o=P(n);l=j(o,!1),o.forEach(e),this.h()},h(){l.a=null,w(n,"class","language-svelte")},m(t,o){p(t,n,o),l.m(r,n)},p:D,d(t){t&&e(n)}}}function as(T){let n,l='This plugin adds support for <strong>PGF/TikZ</strong> illustrations thanks to <a href="https://tikzjax.com/" rel="nofollow">TikZJax</a>. It uses the code generated for the <a href="https://github.com/artisticat1/obsidian-tikzjax" rel="nofollow">Obsidian-TikZ plugin</a>.',r,t,o,u,q='<a href="#important-notes">Important Notes</a>',b,h,O=`<li>This plugin requires the import of a <strong>heavy</strong> library (~7Mb), which is dynamically imported at runtime. This can be avoided by <a href="${X}/getting-started#pre-rendering">pre-rendering</a> content on the server;</li> <li>You need to update your sanitizer to allow the specific tag: <code>&lt;div type=&quot;text/tikz&quot;&gt;</code>.</li>`,y,k,Z='<a href="#setup">Setup</a>',H,m,x,d,R='<a href="#options">Options</a>',M,_,S="Here are the options you can pass to <code>tikz()</code>:",z,v,L,K=`<code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">TikzExtensionOptions</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
	 * Enables Tikzjax console output.
	 */</span>
	debug<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Class for generated svg div container.
	 */</span>
	<span class="token keyword">class</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Whether to center the generated expression.
	 * @default true
	 */</span>
	center<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
	<span class="token comment">/**
	 * Post processing function for html.
	 * This also runs on stored html.
	 */</span>
	postProcessing<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,C;return t=new B({props:{$$slots:{default:[ss]},$$scope:{ctx:T}}}),m=new B({props:{$$slots:{default:[ns]},$$scope:{ctx:T}}}),{c(){n=i("p"),n.innerHTML=l,r=f(),G(t.$$.fragment),o=f(),u=i("h2"),u.innerHTML=q,b=f(),h=i("ol"),h.innerHTML=O,y=f(),k=i("h2"),k.innerHTML=Z,H=f(),G(m.$$.fragment),x=f(),d=i("h2"),d.innerHTML=R,M=f(),_=i("p"),_.innerHTML=S,z=f(),v=i("pre"),L=new E(!1),this.h()},l(s){n=c(s,"P",{"data-svelte-h":!0}),$(n)!=="svelte-11uvihg"&&(n.innerHTML=l),r=g(s),J(t.$$.fragment,s),o=g(s),u=c(s,"H2",{id:!0,"data-svelte-h":!0}),$(u)!=="svelte-svduj1"&&(u.innerHTML=q),b=g(s),h=c(s,"OL",{"data-svelte-h":!0}),$(h)!=="svelte-ogip0x"&&(h.innerHTML=O),y=g(s),k=c(s,"H2",{id:!0,"data-svelte-h":!0}),$(k)!=="svelte-1uj9ei1"&&(k.innerHTML=Z),H=g(s),J(m.$$.fragment,s),x=g(s),d=c(s,"H2",{id:!0,"data-svelte-h":!0}),$(d)!=="svelte-qvxcr2"&&(d.innerHTML=R),M=g(s),_=c(s,"P",{"data-svelte-h":!0}),$(_)!=="svelte-1p7trzu"&&(_.innerHTML=S),z=g(s),v=c(s,"PRE",{class:!0});var a=P(v);L=j(a,!1),a.forEach(e),this.h()},h(){w(u,"id","important-notes"),w(k,"id","setup"),w(d,"id","options"),L.a=null,w(v,"class","language-ts")},m(s,a){p(s,n,a),p(s,r,a),N(t,s,a),p(s,o,a),p(s,u,a),p(s,b,a),p(s,h,a),p(s,y,a),p(s,k,a),p(s,H,a),N(m,s,a),p(s,x,a),p(s,d,a),p(s,M,a),p(s,_,a),p(s,z,a),p(s,v,a),L.m(K,v),C=!0},p(s,[a]){const I={};a&1&&(I.$$scope={dirty:a,ctx:s}),t.$set(I);const F={};a&1&&(F.$$scope={dirty:a,ctx:s}),m.$set(F)},i(s){C||(W(t.$$.fragment,s),W(m.$$.fragment,s),C=!0)},o(s){Y(t.$$.fragment,s),Y(m.$$.fragment,s),C=!1},d(s){s&&(e(n),e(r),e(o),e(u),e(b),e(h),e(y),e(k),e(H),e(x),e(d),e(M),e(_),e(z),e(v)),A(t,s),A(m,s)}}}const ls={section:"Plugins",title:"TikZ"};class is extends U{constructor(n){super(),V(this,n,null,as,Q,{})}}export{is as default,ls as metadata};
