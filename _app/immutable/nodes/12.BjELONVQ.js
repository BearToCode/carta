import{t as f,h as y,a as m}from"../chunks/BPY3BYQk.js";import{p as b,s as a,f as x,a as _,$ as C,b as w}from"../chunks/CQjQfKBs.js";import{a as o,t as s}from"../chunks/CCNVrShP.js";import{C as h}from"../chunks/B5vJv_-j.js";var I=f('<meta name="description" content="Code Plugin for Carta. Enables syntax highlighting in code blocks">'),S=f(`<span class="section">Plugins</span> <h1 class="title">Code</h1> <p>This plugin adds support for code blocks <strong>syntax highlighting</strong>. It uses the same
	highlighter from the core package(Shiki).</p> <h2 id="installation">Installation</h2> <!> <h2 id="setup">Setup</h2> <h3>Styles</h3> <p>Import the default styles:</p> <!> <h3>Using the default highlighter</h3> <p>Carta comes with a default highlighter that matches the one used to highlight markdown in the
	editor and is used by default (Shiki). If you want to use a theme different from the one used to
	highlight Markdown, you can specify it in the options.</p> <!> <h3>Using a custom highlighter</h3> <p>It is no longer possible to specify a custom highlighter in this plugin. However, there are many
	different <a href="https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins">Remark plugins</a> that provide syntax highlighting.</p> <h2 id="extensions">Extension</h2> <!> <h2 id="options">Options</h2> <p>The options you can pass to code() extend the ones provided by <a href="https://shiki.matsu.io/guide/transformers">Shiki</a>.</p>`,1);function T(k,i){b(i,!0);var n=S();y(e=>{var t=I();C.title="Code Plugin - Carta",m(e,t)});var r=a(x(n),6);o(r,e=>{var t;return(t=s)==null?void 0:t(e)});var d=a(r,2);h(d,{get code(){return i.data.codeBlocks.installation}});var l=a(d,2);o(l,e=>{var t;return(t=s)==null?void 0:t(e)});var g=a(l,6);h(g,{get code(){return i.data.codeBlocks.styles}});var p=a(g,6);h(p,{get code(){return i.data.codeBlocks.defaultHighlighter}});var c=a(p,6);o(c,e=>{var t;return(t=s)==null?void 0:t(e)});var u=a(c,2);h(u,{get code(){return i.data.codeBlocks.extension}});var v=a(u,2);o(v,e=>{var t;return(t=s)==null?void 0:t(e)}),w(2),m(k,n),_()}export{T as component};
